'use strict';

var vestUtils = require('vest-utils');
var n4s = require('n4s');

function ruleReturn(pass, message) {
    var output = { pass: pass };
    if (message) {
        output.message = message;
    }
    return output;
}
function failing() {
    return ruleReturn(false);
}
function passing() {
    return ruleReturn(true);
}
function defaultToFailing(callback) {
    return vestUtils.defaultTo(callback, failing());
}
function defaultToPassing(callback) {
    return vestUtils.defaultTo(callback, passing());
}

function runLazyRule(lazyRule, currentValue) {
    try {
        return lazyRule.run(currentValue);
    }
    catch (_a) {
        return failing();
    }
}

function allOf(value) {
    var rules = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rules[_i - 1] = arguments[_i];
    }
    return defaultToPassing(vestUtils.mapFirst(rules, function (rule, breakout) {
        var res = runLazyRule(rule, value);
        breakout(!res.pass, res);
    }));
}

function anyOf(value) {
    var rules = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rules[_i - 1] = arguments[_i];
    }
    return defaultToFailing(vestUtils.mapFirst(rules, function (rule, breakout) {
        var res = runLazyRule(rule, value);
        breakout(res.pass, res);
    }));
}

function noneOf(value) {
    var rules = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rules[_i - 1] = arguments[_i];
    }
    return defaultToPassing(vestUtils.mapFirst(rules, function (rule, breakout) {
        var res = runLazyRule(rule, value);
        breakout(res.pass, failing());
    }));
}

function equals(value, arg1) {
    return value === arg1;
}
vestUtils.bindNot(equals);

var REQUIRED_COUNT = 1;
function oneOf(value) {
    var rules = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rules[_i - 1] = arguments[_i];
    }
    var passingCount = 0;
    rules.some(function (rule) {
        var res = runLazyRule(rule, value);
        if (res.pass) {
            passingCount++;
        }
        if (vestUtils.greaterThan(passingCount, REQUIRED_COUNT)) {
            return false;
        }
    });
    return ruleReturn(equals(passingCount, REQUIRED_COUNT));
}

n4s.enforce.extend({ allOf: allOf, anyOf: anyOf, noneOf: noneOf, oneOf: oneOf });
