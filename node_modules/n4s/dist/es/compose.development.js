import { defaultTo, assign, invariant, StringObject, mapFirst } from 'vest-utils';
import { ctx } from 'n4s';

function ruleReturn(pass, message) {
    var output = { pass: pass };
    if (message) {
        output.message = message;
    }
    return output;
}
function failing() {
    return ruleReturn(false);
}
function passing() {
    return ruleReturn(true);
}
function defaultToPassing(callback) {
    return defaultTo(callback, passing());
}

function runLazyRule(lazyRule, currentValue) {
    try {
        return lazyRule.run(currentValue);
    }
    catch (_a) {
        return failing();
    }
}

/* eslint-disable max-lines-per-function */
function compose() {
    var composites = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        composites[_i] = arguments[_i];
    }
    return assign(function (value) {
        var res = run(value);
        invariant(res.pass, StringObject(res.message));
    }, {
        run: run,
        test: function (value) { return run(value).pass; }
    });
    function run(value) {
        return ctx.run({ value: value }, function () {
            return defaultToPassing(mapFirst(composites, function (composite, breakout) {
                /* HACK: Just a small white lie. ~~HELP WANTED~~.
                   The ideal is that instead of `LazyRuleRunners` We would simply use `Lazy` to begin with.
                   The problem is that lazy rules can't really be passed to this function due to some generic hell
                   so we're limiting it to a small set of functions.
                */
                var res = runLazyRule(composite, value);
                breakout(!res.pass, res);
            }));
        });
    }
}

export { compose as default };
