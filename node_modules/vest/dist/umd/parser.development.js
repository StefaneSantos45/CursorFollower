(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vest'), require('vest-utils')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vest', 'vest-utils'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.parser = {}, global.vest, global["vest-utils"]));
})(this, (function (exports, vest, vestUtils) { 'use strict';

  // eslint-disable-next-line max-statements
  function parse(summary) {
      vestUtils.invariant(summary && vestUtils.hasOwnProperty(summary, 'valid'), "Vest parser: expected argument at position 0 to be Vest's result object.");
      var sel = vest.suiteSelectors(summary);
      var testedStorage = {};
      var selectors = {
          invalid: sel.hasErrors,
          tested: isTested,
          untested: isUntested,
          valid: sel.isValid,
          warning: sel.hasWarnings
      };
      return selectors;
      // Booleans
      function isTested(fieldName) {
          if (!fieldName) {
              return vestUtils.isPositive(summary.testCount);
          }
          if (vestUtils.hasOwnProperty(testedStorage, fieldName))
              return testedStorage[fieldName];
          testedStorage[fieldName] =
              vestUtils.hasOwnProperty(summary.tests, fieldName) &&
                  vestUtils.isPositive(summary.tests[fieldName].testCount);
          return selectors.tested(fieldName);
      }
      function isUntested(fieldName) {
          return !(vestUtils.isPositive(summary.testCount) && selectors.tested(fieldName));
      }
  }

  exports.parse = parse;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
