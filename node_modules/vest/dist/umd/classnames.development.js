(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vest-utils'), require('vest')) :
  typeof define === 'function' && define.amd ? define(['vest-utils', 'vest'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.classnames = factory(global["vest-utils"], global.vest));
})(this, (function (vestUtils, vest) { 'use strict';

  // eslint-disable-next-line max-statements
  function parse(summary) {
      vestUtils.invariant(summary && vestUtils.hasOwnProperty(summary, 'valid'), "Vest parser: expected argument at position 0 to be Vest's result object.");
      var sel = vest.suiteSelectors(summary);
      var testedStorage = {};
      var selectors = {
          invalid: sel.hasErrors,
          tested: isTested,
          untested: isUntested,
          valid: sel.isValid,
          warning: sel.hasWarnings
      };
      return selectors;
      // Booleans
      function isTested(fieldName) {
          if (!fieldName) {
              return vestUtils.isPositive(summary.testCount);
          }
          if (vestUtils.hasOwnProperty(testedStorage, fieldName))
              return testedStorage[fieldName];
          testedStorage[fieldName] =
              vestUtils.hasOwnProperty(summary.tests, fieldName) &&
                  vestUtils.isPositive(summary.tests[fieldName].testCount);
          return selectors.tested(fieldName);
      }
      function isUntested(fieldName) {
          return !(vestUtils.isPositive(summary.testCount) && selectors.tested(fieldName));
      }
  }

  /**
   * Creates a function that returns class names that match the validation result
   */
  function classnames(res, classes) {
      if (classes === void 0) { classes = {}; }
      var selectors = parse(res);
      return function (key) {
          var classesArray = [];
          for (var selector in classes) {
              var sel = selector;
              if (vestUtils.isFunction(selectors[sel]) && selectors[sel](key)) {
                  classesArray.push(classes[sel]);
              }
          }
          return classesArray.join(' ');
      };
  }

  return classnames;

}));
