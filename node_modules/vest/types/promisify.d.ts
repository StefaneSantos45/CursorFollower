type SuiteSummary = {
    groups: Groups;
    tests: Tests;
    valid: boolean;
} & SummaryBase;
type GroupTestSummary = SingleTestSummary;
type Groups = Record<string, Group>;
type Group = Record<string, GroupTestSummary>;
type Tests = Record<string, SingleTestSummary>;
type SingleTestSummary = SummaryBase & {
    errors: string[];
    warnings: string[];
    valid: boolean;
};
type SummaryBase = {
    errorCount: number;
    warnCount: number;
    testCount: number;
};
type FailureMessages = Record<string, string[]>;
type SuiteRunResult = SuiteResult & {
    done: Done;
};
interface Done {
    (...args: [
        cb: (res: SuiteResult) => void
    ]): SuiteRunResult;
    (...args: [
        fieldName: string,
        cb: (res: SuiteResult) => void
    ]): SuiteRunResult;
}
type SuiteName = string | void;
interface SuiteSelectors {
    getErrors(fieldName: string): string[];
    getErrors(): FailureMessages;
    getWarnings(): FailureMessages;
    getWarnings(fieldName: string): string[];
    getErrorsByGroup(groupName: string, fieldName: string): string[];
    getErrorsByGroup(groupName: string): FailureMessages;
    getWarningsByGroup(groupName: string): FailureMessages;
    getWarningsByGroup(groupName: string, fieldName: string): string[];
    hasErrors(fieldName?: string): boolean;
    hasWarnings(fieldName?: string): boolean;
    hasErrorsByGroup(groupName: string, fieldName?: string): boolean;
    hasWarningsByGroup(groupName: string, fieldName?: string): boolean;
    isValid(fieldName?: string): boolean;
    isValidByGroup(groupName: string, fieldName?: string): boolean;
}
type SuiteResult = SuiteSummary & SuiteSelectors & {
    suiteName: SuiteName;
};
declare const promisify: (validatorFn: (...args: any[]) => SuiteRunResult) => (...args: any[]) => Promise<SuiteResult>;
export { promisify as default };
//# sourceMappingURL=promisify.d.ts.map