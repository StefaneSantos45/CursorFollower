type SuiteSummary = {
    groups: Groups;
    tests: Tests;
    valid: boolean;
} & SummaryBase;
type GroupTestSummary = SingleTestSummary;
type Groups = Record<string, Group>;
type Group = Record<string, GroupTestSummary>;
type Tests = Record<string, SingleTestSummary>;
type SingleTestSummary = SummaryBase & {
    errors: string[];
    warnings: string[];
    valid: boolean;
};
type SummaryBase = {
    errorCount: number;
    warnCount: number;
    testCount: number;
};
declare function parse(summary: SuiteSummary): ParsedVestObject;
interface ParsedVestObject {
    valid(fieldName?: string): boolean;
    tested(fieldName?: string): boolean;
    invalid(fieldName?: string): boolean;
    untested(fieldName?: string): boolean;
    warning(fieldName?: string): boolean;
}
export { parse };
//# sourceMappingURL=parser.d.ts.map