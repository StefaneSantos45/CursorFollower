type SuiteSummary = {
    groups: Groups;
    tests: Tests;
    valid: boolean;
} & SummaryBase;
type GroupTestSummary = SingleTestSummary;
type Groups = Record<string, Group>;
type Group = Record<string, GroupTestSummary>;
type Tests = Record<string, SingleTestSummary>;
type SingleTestSummary = SummaryBase & {
    errors: string[];
    warnings: string[];
    valid: boolean;
};
type SummaryBase = {
    errorCount: number;
    warnCount: number;
    testCount: number;
};
/**
 * Creates a function that returns class names that match the validation result
 */
declare function classnames(res: SuiteSummary, classes?: SupportedClasses): (fieldName: string) => string;
type SupportedClasses = {
    valid?: string;
    tested?: string;
    invalid?: string;
    warning?: string;
    untested?: string;
};
export { classnames as default };
//# sourceMappingURL=classnames.d.ts.map